/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import com.sun.glass.events.KeyEvent;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lista.ListaCola;
import res.Persona;
import res.Producto;
import res.interfazDB.ManejoUICompras;
import res.interfazDB.ManejoUIComprasDetalladas;
import res.interfazDB.ManejoUIProductos;

/**
 *
 * @author MrLui
 */
public class PanelCompras extends javax.swing.JPanel{

    /**
     * Creates new form PanelCompras
     */
    public int buscarPor=1;
    ManejoUICompras UIC = new ManejoUICompras();
    ManejoUIComprasDetalladas UICD = new ManejoUIComprasDetalladas();
    ManejoUIProductos UIP = new ManejoUIProductos();
    ListaCola<Producto> queue = new ListaCola<>();
    ListaCola<Persona> queueProv = new ListaCola<>();
    Producto producto;
    Persona proveedor;
    DefaultTableModel modeloTablaAlmacen;
    DefaultTableModel modeloTablaCompras;
    static float total = 0;
    static String[] cabeceraTablaAlmacen = {"ID", "Nombre", "Precio", "Existencia"};
    static String[] cabeceraTablaCompras = {"ID", "Nombre", "Precio", "Cantidad"};
    boolean proveedorRd = false;
    
    public PanelCompras(){
        
        initComponents();
        setSize(1250,720);
        lblBuscar.setVisible(false);
        txtComprasProdBuscar.setVisible(false);
        btnBuscarProd.setVisible(false);
        modeloTablaAlmacen = new DefaultTableModel(null,cabeceraTablaAlmacen);
        modeloTablaCompras = new DefaultTableModel(null,cabeceraTablaCompras);
        tablaAlmacen.setModel(modeloTablaAlmacen);
        tablaCompras.setModel(modeloTablaCompras);
        tablaAlmacen.getTableHeader().setReorderingAllowed(false);
        tablaCompras.getTableHeader().setReorderingAllowed(false);
        labelWarning1.setVisible(false);
        
        try{
            queue = UIC.consulta(buscarPor, null);
        }catch(SQLException sqlE){
            System.out.println(sqlE.getMessage());
        }
        
        while(true){
            if (!queue.hasNext()) {
                break;
            }
        producto=queue.pop();
        String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
        modeloTablaAlmacen.addRow(datos);
        }
        tablaAlmacen.getTableHeader().setReorderingAllowed(false);
        tablaCompras.getTableHeader().setReorderingAllowed(false);
        
        try{
            queueProv = UIC.consultaProv();
        }catch(SQLException sqlE){
            System.out.println(sqlE.getMessage());
        }
        
        while(true){
            if (!queueProv.hasNext()) {
                break;
            }
        proveedor=queueProv.pop();
        String datos = proveedor.getNombre();
        jcbProveedores.addItem(datos);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupFiltro = new javax.swing.ButtonGroup();
        panelCompras = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCompras = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btnRadioExistencia = new javax.swing.JRadioButton();
        btnRadioID = new javax.swing.JRadioButton();
        btnRadioNombre = new javax.swing.JRadioButton();
        btnRadioPrecio = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        txtComprasProdBuscar = new javax.swing.JTextField();
        lblBuscar = new javax.swing.JLabel();
        btnConsultaCompras = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAlmacen = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        btnElimProdCompra = new javax.swing.JButton();
        btnAddProdCompra = new javax.swing.JButton();
        btnBuscarProd = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtCambio1 = new javax.swing.JTextField();
        txtPago1 = new javax.swing.JTextField();
        txtTotal1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btnCambio = new javax.swing.JButton();
        labelTotal1 = new javax.swing.JLabel();
        btnNewCompra = new javax.swing.JButton();
        labelWarning1 = new javax.swing.JLabel();
        btnTotal = new javax.swing.JButton();
        jcbProveedores = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnRadioTodos = new javax.swing.JRadioButton();

        tablaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaCompras);

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel5.setText("Productos por comprar");

        btnGroupFiltro.add(btnRadioExistencia);
        btnRadioExistencia.setText("Existencia");
        btnRadioExistencia.setEnabled(false);
        btnRadioExistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioExistenciaActionPerformed(evt);
            }
        });

        btnGroupFiltro.add(btnRadioID);
        btnRadioID.setText("ID ");
        btnRadioID.setEnabled(false);
        btnRadioID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioIDActionPerformed(evt);
            }
        });

        btnGroupFiltro.add(btnRadioNombre);
        btnRadioNombre.setText("Nombre");
        btnRadioNombre.setEnabled(false);
        btnRadioNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioNombreActionPerformed(evt);
            }
        });

        btnGroupFiltro.add(btnRadioPrecio);
        btnRadioPrecio.setText("Precio");
        btnRadioPrecio.setEnabled(false);
        btnRadioPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioPrecioActionPerformed(evt);
            }
        });

        jLabel7.setText("Filtrar por:");

        lblBuscar.setText("Buscar");

        btnConsultaCompras.setText("Consultar compras");
        btnConsultaCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaComprasActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setText("GESTIONAR COMPRAS");

        tablaAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jScrollPane2.setViewportView(tablaAlmacen);

    jLabel9.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
    jLabel9.setText("Productos disponibles");

    btnElimProdCompra.setText("Quitar producto de la compra");
    btnElimProdCompra.setEnabled(false);
    btnElimProdCompra.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnElimProdCompraActionPerformed(evt);
        }
    });

    btnAddProdCompra.setText("Agregar producto a la compra");
    btnAddProdCompra.setEnabled(false);
    btnAddProdCompra.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnAddProdCompraActionPerformed(evt);
        }
    });

    btnBuscarProd.setText("Buscar");
    btnBuscarProd.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBuscarProdActionPerformed(evt);
        }
    });

    btnActualizar.setText("Actualizar todo lo Actualizable");
    btnActualizar.setToolTipText("Â¿No aparece el producto que recien agregaste, etc? - Intenta actualizando");
    btnActualizar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnActualizarActionPerformed(evt);
        }
    });

    jLabel10.setText("Cambio");

    txtCambio1.setEditable(false);
    txtCambio1.setText("$ ");

    txtPago1.setEditable(false);
    txtPago1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            txtPago1KeyTyped(evt);
        }
    });

    txtTotal1.setEditable(false);
    txtTotal1.setText("$");

    jLabel11.setText("Pago");

    btnCambio.setText("Calcular el cambio");
    btnCambio.setEnabled(false);
    btnCambio.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnCambioActionPerformed(evt);
        }
    });

    labelTotal1.setText("Total");

    btnNewCompra.setText("Terminar Compra");
    btnNewCompra.setEnabled(false);
    btnNewCompra.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnNewCompraActionPerformed(evt);
        }
    });

    labelWarning1.setText("No se permiten caracteres no numericos");

    btnTotal.setText("Calcular Total");
    btnTotal.setEnabled(false);
    btnTotal.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnTotalActionPerformed(evt);
        }
    });

    jcbProveedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un Proveedor" }));
    jcbProveedores.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            jcbProveedoresItemStateChanged(evt);
        }
    });

    jLabel1.setText("Proveedor:");

    btnGroupFiltro.add(btnRadioTodos);
    btnRadioTodos.setText("Todos");
    btnRadioTodos.setEnabled(false);
    btnRadioTodos.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRadioTodosActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout panelComprasLayout = new javax.swing.GroupLayout(panelCompras);
    panelCompras.setLayout(panelComprasLayout);
    panelComprasLayout.setHorizontalGroup(
        panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelComprasLayout.createSequentialGroup()
            .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGap(147, 147, 147)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGap(156, 156, 156)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addComponent(txtPago1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnCambio, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addComponent(txtCambio1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addComponent(labelTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnNewCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelWarning1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGap(185, 185, 185)
                    .addComponent(btnTotal)))
            .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelComprasLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnAddProdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnElimProdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(panelComprasLayout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(btnConsultaCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(panelComprasLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jcbProveedores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(71, 71, 71)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(336, 336, 336)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(246, 246, 246)
                            .addComponent(lblBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(txtComprasProdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBuscarProd))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(236, 236, 236)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRadioID)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnRadioNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnRadioPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnRadioExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRadioTodos))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(333, 333, 333)
                            .addComponent(btnActualizar)))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGap(879, 879, 879))
    );
    panelComprasLayout.setVerticalGroup(
        panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelComprasLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(lblBuscar))
                        .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtComprasProdBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarProd)))
                    .addGap(20, 20, 20)
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7)
                        .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRadioPrecio)
                            .addComponent(btnRadioExistencia)
                            .addComponent(btnRadioNombre)
                            .addComponent(btnRadioTodos))
                        .addComponent(btnRadioID))
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(29, 29, 29)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelComprasLayout.createSequentialGroup()
                            .addGap(74, 74, 74)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jcbProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAddProdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnElimProdCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(btnConsultaCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(15, 15, 15)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addGap(240, 240, 240))
                .addGroup(panelComprasLayout.createSequentialGroup()
                    .addGap(11, 11, 11)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(40, 40, 40)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnTotal)
                    .addGap(13, 13, 13)
                    .addComponent(labelWarning1)
                    .addGap(6, 6, 6)
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPago1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11))
                    .addGap(0, 0, 0)
                    .addComponent(btnCambio)
                    .addGap(7, 7, 7)
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCambio1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addGap(11, 11, 11)
                    .addGroup(panelComprasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTotal1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelTotal1))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnNewCompra)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(panelCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 771, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(panelCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultaComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaComprasActionPerformed
        FrameComprasConsulta fcc = new FrameComprasConsulta();
        fcc.setVisible(true);
    }//GEN-LAST:event_btnConsultaComprasActionPerformed

    private void txtPago1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPago1KeyTyped
        char nume = evt.getKeyChar();
        if (((int)evt.getKeyChar()>32 && (int)evt.getKeyChar()<46) || (Character.isLetter(nume)) || ((int)evt.getKeyChar()>57 && (int)evt.getKeyChar()<=254) || ((int)evt.getKeyChar()==47)){
            labelWarning1.setVisible(true);
            evt.consume();
        }else{
            if((Character.isDigit(nume)) || (nume==KeyEvent.VK_BACKSPACE)){
                labelWarning1.setVisible(false);  
            }
        }
    }//GEN-LAST:event_txtPago1KeyTyped

    private void btnCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambioActionPerformed
        float totalPagar=0;
        float feriaPago=0, total=0; 
        totalPagar=Float.valueOf(txtTotal1.getText());
        if (txtPago1.getText().trim().isEmpty()) { 
            JOptionPane.showMessageDialog(this,"No se introdujo la cantidad para pagar","No vas a pagar o que?",JOptionPane.ERROR_MESSAGE);
        }else{
            if (modeloTablaCompras.getRowCount()==1) {
                feriaPago=Float.valueOf(txtPago1.getText());             
                if (feriaPago>=totalPagar) {
                    total=feriaPago-totalPagar;
                    txtCambio1.setText("$ "+total);
                    btnNewCompra.setEnabled(true);
                }else{
                    JOptionPane.showMessageDialog(this,"Falta ingresar dinero para pagar","Falta feria",JOptionPane.ERROR_MESSAGE);
                }        
            }else{
                feriaPago=Float.valueOf(txtPago1.getText());
                if (feriaPago>=totalPagar) {
                    total=feriaPago-totalPagar;
                    txtCambio1.setText("$ "+String.valueOf(total));
                    btnNewCompra.setEnabled(true);
                }else{
                    JOptionPane.showMessageDialog(this,"Falta ingresar dinero para pagar","Falta feria",JOptionPane.ERROR_MESSAGE);
                } 
            }
        }
    }//GEN-LAST:event_btnCambioActionPerformed

    private void btnNewCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCompraActionPerformed
        String provCombo=jcbProveedores.getSelectedItem().toString();
        int idP = 0, id = 0, cantidad = 0, Nexistencia = 0, existenciaA = 0, stock = 0;
        float totalC =0, subTotal = 0, precio = 0;
        String query="", nombre="", UM="";
        totalC=Float.valueOf(txtTotal1.getText());
        try {
            idP = UICD.conProvID(jcbProveedores.getSelectedItem().toString());
        } catch (SQLException ex) {
            Logger.getLogger(PanelCompras.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            UICD.agregar(idP, dia(), mes(), year(), totalC);         
        } catch (SQLException ex) {
            //HOALXD
        }
        for (int i = 0; i < modeloTablaCompras.getRowCount(); i++) {
            id = Integer.parseInt((String) modeloTablaCompras.getValueAt(i, 0));
            nombre = (String) modeloTablaCompras.getValueAt(i, 1);
            try {
                existenciaA = UIC.ExistenciaConsul(id);
            } catch (SQLException ex) {
                Logger.getLogger(PanelCompras.class.getName()).log(Level.SEVERE, null, ex);
            }
            cantidad = Integer.parseInt((String) modeloTablaCompras.getValueAt(i, 3));
            Nexistencia = cantidad + existenciaA;
            subTotal = (Float.valueOf(String.valueOf(modeloTablaCompras.getValueAt(i, 2))));
            try {
                UIC.agregar(id, cantidad, subTotal);
                UIC.UpdateProdEx(id, Nexistencia);
            } catch (SQLException ex) {
                Logger.getLogger(PanelCompras.class.getName()).log(Level.SEVERE, null, ex);
            }
        }  
        modeloTablaCompras.setRowCount(0);
        txtCambio1.setText("");
        txtPago1.setText("");
        txtTotal1.setText("");
        btnNewCompra.setEnabled(false);
        btnCambio.setEnabled(false);
        btnTotal.setEnabled(false);
        txtPago1.setEnabled(false); 
        jcbProveedores.setEnabled(true); 
        
        try {
                queue = UIC.consultaPorProv(provCombo);
            } catch (SQLException ex) {
                Logger.getLogger(PanelCompras.class.getName()).log(Level.SEVERE, null, ex);
            }
            vaciarTabla();
            tablaAlmacen.repaint();
            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        JOptionPane.showMessageDialog(this,"Su compra fue realiazada con exito","Compra Exitosa",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnNewCompraActionPerformed

    private void btnRadioIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioIDActionPerformed
        lblBuscar.setVisible(false);
        txtComprasProdBuscar.setVisible(false);
        txtComprasProdBuscar.setText("");
        btnBuscarProd.setVisible(false);
        buscarPor=2;
        vaciarTabla();
        tablaAlmacen.repaint();
        if (proveedorRd==false) {
            try{
            queue = UIC.consultaPorProvRDB(buscarPor, null);
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }else{
            try{
            queue = UIC.consultaPorProvRDB(buscarPor, jcbProveedores.getSelectedItem().toString());
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }
    }//GEN-LAST:event_btnRadioIDActionPerformed

    private void btnRadioNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioNombreActionPerformed
        lblBuscar.setVisible(true);
        txtComprasProdBuscar.setVisible(true);
        btnBuscarProd.setVisible(true);
        buscarPor=3;
        
    }//GEN-LAST:event_btnRadioNombreActionPerformed

    private void btnRadioPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioPrecioActionPerformed
        lblBuscar.setVisible(false);
        txtComprasProdBuscar.setVisible(false);
        txtComprasProdBuscar.setText("");
        btnBuscarProd.setVisible(false);
        buscarPor=4;
        vaciarTabla();
        tablaAlmacen.repaint();
        if (proveedorRd==false) {
           try{
            queue = UIC.consultaPorProvRDB(buscarPor, null);
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            } 
        }else{
            try{
                queue = UIC.consultaPorProvRDB(buscarPor, jcbProveedores.getSelectedItem().toString());
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }
    }//GEN-LAST:event_btnRadioPrecioActionPerformed

    private void btnRadioExistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioExistenciaActionPerformed
        lblBuscar.setVisible(false);
        txtComprasProdBuscar.setVisible(false);
        txtComprasProdBuscar.setText("");
        btnBuscarProd.setVisible(false);
        buscarPor=5;
        vaciarTabla();
        tablaAlmacen.repaint();
        if (proveedorRd==false) {
            try{
            queue = UIC.consultaPorProvRDB(buscarPor, null);
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }else{
            try{
                queue = UIC.consultaPorProvRDB(buscarPor, jcbProveedores.getSelectedItem().toString());
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }
    }//GEN-LAST:event_btnRadioExistenciaActionPerformed

    private void btnBuscarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProdActionPerformed
        boolean error=false;
        if (proveedorRd==false){
            try{
            queue = UIC.consultaPorProvRDBNom(null, txtComprasProdBuscar.getText());
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            if (!queue.hasNext()) {
                error=true;
                JOptionPane.showMessageDialog(this,"El producto buscado no existe","Producto no encontrado",JOptionPane.ERROR_MESSAGE);
                txtComprasProdBuscar.setText("");
            }

            if(error==false){
                vaciarTabla();
                tablaAlmacen.repaint();
                while(true){
                    if (!queue.hasNext()) {
                        break;
                    }
                producto=queue.pop();
                String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
                modeloTablaAlmacen.addRow(datos);
                tablaAlmacen.repaint();
                }
            }  
        }else{
            try{
                queue = UIC.consultaPorProvRDBNom(jcbProveedores.getSelectedItem().toString(), txtComprasProdBuscar.getText());
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            if (!queue.hasNext()) {
                error=true;
                JOptionPane.showMessageDialog(this,"El producto buscado no existe","Producto no encontrado",JOptionPane.ERROR_MESSAGE);
                txtComprasProdBuscar.setText("");
            }

            if(error==false){
                vaciarTabla();
                tablaAlmacen.repaint();
                while(true){
                    if (!queue.hasNext()) {
                        break;
                    }
                producto=queue.pop();
                String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
                modeloTablaAlmacen.addRow(datos);
                tablaAlmacen.repaint();
                }
            }  
        }
    }//GEN-LAST:event_btnBuscarProdActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        boolean repetido=false;
        try{
            queueProv = UIC.getLastProvID();
        }catch(SQLException sqlE){
            System.out.println(sqlE.getMessage());
        }
        
        while(true){
            if (!queueProv.hasNext()) {
                break;
            }
        proveedor=queueProv.pop();
        String datos = proveedor.getNombre();
        for (int i = 0; i < jcbProveedores.getItemCount(); i++) {
            if (jcbProveedores.getItemAt(i).toString().equals(datos)) {
                repetido=true;
            }else{
                //HOAL
            }
        }
        if (repetido==false) {
            jcbProveedores.addItem(datos);
        }
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnAddProdCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProdCompraActionPerformed
        if (tablaAlmacen.getSelectedRow() != -1 ) {
                btnTotal.setEnabled(true);
                txtCambio1.setText("");
                txtTotal1.setText("");
                String[] sel = new String[modeloTablaAlmacen.getColumnCount()-1];
                for (int i = 0; i < sel.length; i++) {
                    sel[i] = modeloTablaAlmacen.getValueAt(tablaAlmacen.getSelectedRow(), i).toString();
                }

               int i = 0;
               int cantidad = 1;

               while (i < modeloTablaCompras.getRowCount()) {
                       if (sel[0] == ((modeloTablaCompras.getValueAt(i, 0)))) {
                           cantidad+= Integer.parseInt((String) modeloTablaCompras.getValueAt(i, 3));
                           sel[2] = String.valueOf(Float.valueOf(sel[2]) * cantidad);
                           modeloTablaCompras.removeRow(i);
                       }
                       i++;
                }
               String cantS = String.valueOf(cantidad);
               Object[] prueba321 = {sel[0],sel[1],sel[2],cantS};
               modeloTablaCompras.addRow(prueba321); 
        } else {
            JOptionPane.showMessageDialog(this, "Favor de seleccionar un producto de la tabla de productos", "Sin seleccion", JOptionPane.INFORMATION_MESSAGE);
        }
        jcbProveedores.setEnabled(false); 
    }//GEN-LAST:event_btnAddProdCompraActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
        float totalPagar=0;
        if (modeloTablaCompras.getRowCount()==1) {
                totalPagar=Float.valueOf(String.valueOf(modeloTablaCompras.getValueAt(0, 2)));             
                    txtTotal1.setText(String.valueOf(totalPagar));       
            }else{
                for (int i = 0; i < modeloTablaCompras.getRowCount(); i++) {
                    totalPagar+=Float.valueOf(String.valueOf(modeloTablaCompras.getValueAt(i, 2)));
                }
                txtTotal1.setText(String.valueOf(totalPagar));
            }
        btnCambio.setEnabled(true);
        txtPago1.setEditable(true);
        txtPago1.setEnabled(true); 
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnElimProdCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElimProdCompraActionPerformed
        int cantidad = 0;
        String[] sel = new String[modeloTablaCompras.getColumnCount()];
        if (tablaCompras.getSelectedRow() != -1 ) {
            txtCambio1.setText("");
            txtTotal1.setText("");
            if (Integer.parseInt((String) modeloTablaCompras.getValueAt(tablaCompras.getSelectedRow(), 3))==1) {
                modeloTablaCompras.removeRow(tablaCompras.getSelectedRow());
            }else{
                
                for (int i = 0; i < sel.length; i++) {
                    sel[i] = modeloTablaCompras.getValueAt(tablaCompras.getSelectedRow(), i).toString();
                }
                cantidad = Integer.parseInt((String) modeloTablaCompras.getValueAt(tablaCompras.getSelectedRow(), 3));
                float precio = Float.valueOf((String) modeloTablaCompras.getValueAt(tablaCompras.getSelectedRow(), 2)); 
                int precioDel;
                
                for (int i = 0; i < modeloTablaAlmacen.getRowCount(); i++) {
                    if (Integer.parseInt((String) modeloTablaCompras.getValueAt(tablaCompras.getSelectedRow(), 0)) == Integer.parseInt((String)tablaAlmacen.getValueAt(i, 0))) {
                        cantidad--;
                        precioDel=tablaCompras.getSelectedRow();
                        sel[2]=String.valueOf(precio-Float.valueOf((String)tablaAlmacen.getValueAt(i, 2)));
                        String cantS = String.valueOf(cantidad);
                        Object aux = sel[2];
                        Object aux2 = cantS;
                        tablaCompras.setValueAt(aux, tablaCompras.getSelectedRow(), 2);
                        tablaCompras.setValueAt(aux2, tablaCompras.getSelectedRow(), 3);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Favor de seleccionar un producto para quitarlo", "Sin seleccion", JOptionPane.INFORMATION_MESSAGE);
        }
        if (modeloTablaCompras.getRowCount()==0) {
            btnNewCompra.setEnabled(false);
            txtPago1.setText("");
            txtPago1.setEditable(false);
            btnCambio.setEnabled(false);
            btnTotal.setEnabled(false); 
        }
    }//GEN-LAST:event_btnElimProdCompraActionPerformed

    private void jcbProveedoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbProveedoresItemStateChanged
        String provCombo=jcbProveedores.getSelectedItem().toString();
        if (provCombo.equals("Seleccione un Proveedor")) {
            btnAddProdCompra.setEnabled(false);
            btnElimProdCompra.setEnabled(false);
            vaciarTabla();
            tablaAlmacen.repaint();
            try{
            queue = UIC.consulta(buscarPor, null);
            }catch(SQLException sqlE){
                System.out.println(sqlE.getMessage());
            }

            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            }
            btnRadioExistencia.setEnabled(false);
            btnRadioID.setEnabled(false);
            btnRadioNombre.setEnabled(false);
            btnRadioPrecio.setEnabled(false);
            btnBuscarProd.setVisible(false);
            txtComprasProdBuscar.setVisible(false); 
            btnRadioTodos.setEnabled(false); 
        }else{
            proveedorRd=true;
            btnAddProdCompra.setEnabled(true);
            btnElimProdCompra.setEnabled(true);
            btnRadioExistencia.setEnabled(true);
            btnRadioID.setEnabled(true);
            btnRadioNombre.setEnabled(true);
            btnRadioPrecio.setEnabled(true);
            btnRadioTodos.setEnabled(true); 
            try {
                queue = UIC.consultaPorProv(provCombo);
            } catch (SQLException ex) {
                Logger.getLogger(PanelCompras.class.getName()).log(Level.SEVERE, null, ex);
            }
            vaciarTabla();
            tablaAlmacen.repaint();
            while(true){
                if (!queue.hasNext()) {
                    break;
                }
            producto=queue.pop();
            String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
            modeloTablaAlmacen.addRow(datos);
            tablaAlmacen.repaint();
            }
        }
    }//GEN-LAST:event_jcbProveedoresItemStateChanged

    private void btnRadioTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioTodosActionPerformed
        vaciarTabla();
        tablaAlmacen.repaint();
        try{
            queue = UIC.radioTodos();
        }catch(SQLException sqlE){
            System.out.println(sqlE.getMessage());
        }
        
        while(true){
            if (!queue.hasNext()) {
                break;
            }
        producto=queue.pop();
        String[] datos = {String.valueOf(producto.getId()), producto.getNombre(),String.valueOf(producto.getPrecio()), String.valueOf(producto.getExistencia())};
        modeloTablaAlmacen.addRow(datos);
        }
    }//GEN-LAST:event_btnRadioTodosActionPerformed
    
    public static int dia() {
        Calendar fechaC = Calendar.getInstance();
        return fechaC.getTime().getDate();
    }

    public static int mes() {
        Calendar fechaC = Calendar.getInstance();
        return (fechaC.getTime().getMonth()+1);
    }

    public static int year() {
        Calendar fechaC = Calendar.getInstance();
        return (fechaC.getTime().getYear()+1900);
    }
    
    public void vaciarTabla() {
        modeloTablaAlmacen.setRowCount(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAddProdCompra;
    private javax.swing.JButton btnBuscarProd;
    private javax.swing.JButton btnCambio;
    private javax.swing.JButton btnConsultaCompras;
    private javax.swing.JButton btnElimProdCompra;
    private javax.swing.ButtonGroup btnGroupFiltro;
    private javax.swing.JButton btnNewCompra;
    private javax.swing.JRadioButton btnRadioExistencia;
    private javax.swing.JRadioButton btnRadioID;
    private javax.swing.JRadioButton btnRadioNombre;
    private javax.swing.JRadioButton btnRadioPrecio;
    private javax.swing.JRadioButton btnRadioTodos;
    private javax.swing.JButton btnTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jcbProveedores;
    private javax.swing.JLabel labelTotal1;
    private javax.swing.JLabel labelWarning1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JPanel panelCompras;
    private javax.swing.JTable tablaAlmacen;
    private javax.swing.JTable tablaCompras;
    private javax.swing.JTextField txtCambio1;
    private javax.swing.JTextField txtComprasProdBuscar;
    private javax.swing.JTextField txtPago1;
    private javax.swing.JTextField txtTotal1;
    // End of variables declaration//GEN-END:variables

}
