/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package src;

import java.sql.SQLException;
import lista.ListaCola;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import res.Producto;
import res.interfazDB.ManejoUIProductos;

/**
 *
 * @author vival
 */
public class GestionarAlmacen extends javax.swing.JPanel {
    DefaultTableModel modeloTablaAlmacen;
    static String[] cabeceraTablaAlmacen = {"ID", "Nombre", "Precio", "Existencia", "Stock", "Unidad de Medida"};
    static int tablaAlmacenSeleccionModificar;
    static ManejoUIProductos mUIP = new ManejoUIProductos();
    /**
     * Creates new form GestionarAlmacen
     */
    public GestionarAlmacen() {
        initComponents();
        btnGroupAlmacen.add(btnRadioID);
        btnGroupAlmacen.add(btnRadioNombre);
        btnGroupAlmacen.add(btnRadioPrecio);
        btnGroupAlmacen.add(btnRadioCantidad);
        
        modeloTablaAlmacen = new DefaultTableModel(null,cabeceraTablaAlmacen){
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6;
            }
            
        };
        tablaAlmacen.setModel(modeloTablaAlmacen);
        tablaAlmacen.getTableHeader().setReorderingAllowed(false);
        almacenFormaBase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupAlmacen = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlmacen = new javax.swing.JTable();
        btnAlmacenAgregar = new javax.swing.JButton();
        btnAlmacenEliminar = new javax.swing.JButton();
        btnAlmacenModificar = new javax.swing.JButton();
        btnAlmacenConsultar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnRadioCantidad = new javax.swing.JRadioButton();
        btnRadioID = new javax.swing.JRadioButton();
        btnRadioNombre = new javax.swing.JRadioButton();
        btnRadioPrecio = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        labelAlmacenUM = new javax.swing.JLabel();
        labelAlmacenStock = new javax.swing.JLabel();
        labelAlmacenExistencia = new javax.swing.JLabel();
        labelAlmacenPrecio = new javax.swing.JLabel();
        labelAlmacenNombre = new javax.swing.JLabel();
        txtExistencia = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        labelTituloAlmacen = new javax.swing.JLabel();
        btnConfirmarAlmacen = new javax.swing.JButton();
        comboBoxAlmacenUM = new javax.swing.JComboBox<>();
        txtAlmacenBuscar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1450, 694));

        tablaAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaAlmacen);

        btnAlmacenAgregar.setText("Agregar");
        btnAlmacenAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlmacenAgregarActionPerformed(evt);
            }
        });

        btnAlmacenEliminar.setText("Eliminar");
        btnAlmacenEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlmacenEliminarActionPerformed(evt);
            }
        });

        btnAlmacenModificar.setText("Modificar");
        btnAlmacenModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlmacenModificarActionPerformed(evt);
            }
        });

        btnAlmacenConsultar.setText("Consultar");
        btnAlmacenConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlmacenConsultarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setText("GESTIONAR ALMACEN");

        btnRadioCantidad.setText("Existencia");
        btnRadioCantidad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRadioCantidadMouseClicked(evt);
            }
        });

        btnRadioID.setText("ID");
        btnRadioID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRadioIDMouseClicked(evt);
            }
        });

        btnRadioNombre.setText("Nombre");
        btnRadioNombre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRadioNombreMouseClicked(evt);
            }
        });

        btnRadioPrecio.setText("Precio");
        btnRadioPrecio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRadioPrecioMouseClicked(evt);
            }
        });

        jLabel7.setText("Filtrar por:");

        labelAlmacenUM.setText("Unidad de medida");

        labelAlmacenStock.setText("Stock");

        labelAlmacenExistencia.setText("Existencia");

        labelAlmacenPrecio.setText("Precio");

        labelAlmacenNombre.setText("Nombre");

        txtExistencia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtExistenciaKeyTyped(evt);
            }
        });

        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });

        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockKeyTyped(evt);
            }
        });

        labelTituloAlmacen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTituloAlmacen.setText("jLabel8");

        btnConfirmarAlmacen.setText("Confirmar");
        btnConfirmarAlmacen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarAlmacenActionPerformed(evt);
            }
        });

        comboBoxAlmacenUM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Empaquetado", "Kilogramos" }));

        txtAlmacenBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAlmacenBuscarKeyReleased(evt);
            }
        });

        jLabel8.setText("Buscar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(btnAlmacenAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAlmacenEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(btnAlmacenModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnAlmacenConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(labelTituloAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAlmacenNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAlmacenPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAlmacenExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAlmacenStock, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelAlmacenUM, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(comboBoxAlmacenUM, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(btnConfirmarAlmacen)))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(txtAlmacenBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRadioID, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRadioNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRadioPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRadioCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(349, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAlmacenAgregar)
                                    .addComponent(btnAlmacenEliminar))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAlmacenModificar)
                                    .addComponent(btnAlmacenConsultar))
                                .addGap(30, 30, 30)
                                .addComponent(labelTituloAlmacen)
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(labelAlmacenNombre))
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(labelAlmacenPrecio))
                                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(labelAlmacenExistencia))
                                    .addComponent(txtExistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(labelAlmacenStock))
                                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAlmacenUM)
                                    .addComponent(comboBoxAlmacenUM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addComponent(btnConfirmarAlmacen))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8))
                            .addComponent(txtAlmacenBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel7)
                        .addGap(16, 16, 16)
                        .addComponent(btnRadioID)
                        .addGap(17, 17, 17)
                        .addComponent(btnRadioNombre)
                        .addGap(17, 17, 17)
                        .addComponent(btnRadioPrecio)
                        .addGap(17, 17, 17)
                        .addComponent(btnRadioCantidad))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlmacenAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlmacenAgregarActionPerformed
        almacenFormaBase();
        almacenEditable();
        labelTituloAlmacen.setText("Agregar");
    }//GEN-LAST:event_btnAlmacenAgregarActionPerformed

    private void btnAlmacenEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlmacenEliminarActionPerformed
        boolean seLogro = false;
        if(tablaAlmacen.getSelectedRow() != -1) {
            int seleccion, seleccion2;
            String[] aux = new String[modeloTablaAlmacen.getColumnCount()];
            for (int i = 0; i < aux.length; i++) {
                aux[i] = modeloTablaAlmacen.getValueAt(tablaAlmacen.getSelectedRow(), i).toString();
            }
            seleccion = JOptionPane.showConfirmDialog(this, "Seguro que quieres eliminar el siguiente producto? \n " + aux[1]
                , "Eliminar producto", JOptionPane.WARNING_MESSAGE);
            if (JOptionPane.OK_OPTION == seleccion) {
                try {
                    seLogro = mUIP.eliminar(Integer.parseInt(aux[0]));
                    if (!seLogro) {
                        JOptionPane.showMessageDialog(this, "El producto se a eliminado con exito", "Producto eliminado",
                            JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "El producto no se a podido eliminado", "Producto no eliminado",
                            JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (SQLException ex) {
                    if (ex.getMessage().equals("The DELETE statement conflicted with the REFERENCE constraint \"FK__Ventas__IDPROD__34C8D9D1\". The conflict occurred in database \"Abarrotes\", table \"dbo.Ventas\", column 'IDPROD'.")) {
                        JOptionPane.showMessageDialog(this, "No puedes borrar un producto que se a vendido o comprado", "ERROR", JOptionPane.WARNING_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Porfavor seleccionar el elemento que se desea elminar de la tabla","No se a seleccionado ningun elemnto", JOptionPane.WARNING_MESSAGE );
        }
        consultarSQL("", 0);
    }//GEN-LAST:event_btnAlmacenEliminarActionPerformed

    private void btnAlmacenModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlmacenModificarActionPerformed
        if(tablaAlmacen.getSelectedRow() != -1) {
            labelTituloAlmacen.setText("Modificar");
            labelTituloAlmacen.setVisible(true);
            txtNombre.setVisible(true);
            txtPrecio.setVisible(true);
            txtExistencia.setVisible(true);
            txtStock.setVisible(true);
            comboBoxAlmacenUM.setVisible(true);
            labelAlmacenExistencia.setVisible(true);
            labelAlmacenNombre.setVisible(true);
            labelAlmacenPrecio.setVisible(true);
            labelAlmacenStock.setVisible(true);
            labelAlmacenUM.setVisible(true);
            btnConfirmarAlmacen.setVisible(true);
            btnConfirmarAlmacen.setEnabled(true);
            String[] aux = new String[modeloTablaAlmacen.getColumnCount()];
            for (int i = 0; i < aux.length; i++) {
                aux[i] = modeloTablaAlmacen.getValueAt(tablaAlmacen.getSelectedRow(), i).toString();
            }
            txtNombre.setText(aux[1]);
            txtPrecio.setText(aux[2]);
            txtExistencia.setText(aux[3]);
            txtStock.setText(aux[4]);
            if (aux[5].equals(comboBoxAlmacenUM.getItemAt(0))) {
                comboBoxAlmacenUM.setSelectedIndex(0);
            } else if (aux[5].equals(comboBoxAlmacenUM.getItemAt(1))) {
                comboBoxAlmacenUM.setSelectedIndex(1);
            }
            btnConfirmarAlmacen.setVisible(true);
            btnConfirmarAlmacen.setEnabled(true);
            tablaAlmacenSeleccionModificar = tablaAlmacen.getSelectedRow();
        } else {
            JOptionPane.showMessageDialog(this, "Porfavor seleccionar el elemento que se desea modificar de la tabla","No se a seleccionado ningun elemnto", JOptionPane.WARNING_MESSAGE );
        }
    }//GEN-LAST:event_btnAlmacenModificarActionPerformed

    private void btnAlmacenConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlmacenConsultarActionPerformed
        jLabel7.setVisible(true);
        jLabel8.setVisible(true);
        txtAlmacenBuscar.setVisible(true);
        btnRadioID.setVisible(true);
        btnRadioCantidad.setVisible(true);
        btnRadioNombre.setVisible(true);
        btnRadioPrecio.setVisible(true);
    }//GEN-LAST:event_btnAlmacenConsultarActionPerformed

    private void txtExistenciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExistenciaKeyTyped
        char c = evt.getKeyChar();
        if(c >= 48 && c <= 57 || c == 8) {}
        else {
            JOptionPane.showMessageDialog(this, "El caracter " + c + " no es valido", "Caracter Invalido", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_txtExistenciaKeyTyped

    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        char c = evt.getKeyChar();
        if(c >= 48 && c <= 57 || c == 8) {}
        else {
            evt.consume();
            JOptionPane.showMessageDialog(this, "El caracter " + c + " no es valido", "Caracter Invalido", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyTyped
        char c = evt.getKeyChar();
        if(c >= 48 && c <= 57 || c == 8) {}
        else {
            JOptionPane.showMessageDialog(this, "El caracter " + c + " no es valido", "Caracter Invalido", JOptionPane.ERROR_MESSAGE);
            evt.consume();
        }
    }//GEN-LAST:event_txtStockKeyTyped

    private void btnConfirmarAlmacenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarAlmacenActionPerformed
        boolean seLogro = true;
        switch (labelTituloAlmacen.getText()) {
            case "Agregar":
            if (comprobarTXTAlmacen()) {
                if (comprobarDominio()) {
                    try {
                        mUIP.agregar(txtNombre.getText(), Integer.parseInt(txtExistencia.getText()), Integer.parseInt(txtStock.getText()), Float.valueOf(txtPrecio.getText()), comboBoxAlmacenUM.getSelectedItem().toString());
                        int seleccion = JOptionPane.showOptionDialog(this, "Productor agregado con extio \n Desea agregar otro producto", "Producto agregador",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si");
                        if (seleccion == 1) {
                            almacenFormaBase();
                        } else {
                            txtNombre.setText("");
                            txtPrecio.setText("");
                            txtExistencia.setText("");
                            txtStock.setText("");
                        }
                    } catch (SQLException ex) {
                        if (ex.getMessage().contains("Cannot insert duplicate key in object 'dbo.Productos'")) {
                            JOptionPane.showMessageDialog(this, "No se pueden agregar dos productos con el mismo nombre", "ERROR", JOptionPane.WARNING_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
                        }
                        
                    }
                    
                }
            } else {
                JOptionPane.showMessageDialog(this, "Favor de rellenar todos los campos de texto", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
            break;
            case "Modificar":
            if (tablaAlmacenSeleccionModificar == tablaAlmacen.getSelectedRow()) {
                int seleccion;
                String[] aux = new String[modeloTablaAlmacen.getColumnCount()];
                for (int i = 0; i < aux.length; i++) {
                    aux[i] = modeloTablaAlmacen.getValueAt(tablaAlmacen.getSelectedRow(), i).toString();
                }
                if (comprobarTXTAlmacen()) {
                    if (comprobarDominio()) {
                        seleccion = JOptionPane.showConfirmDialog(this, "Se modificaran los siguientes elementos \n"
                            + aux[1] + "--->"
                            + txtNombre.getText() + "\n" + aux[2] + "--->"
                            + txtPrecio.getText() + "\n" + aux[3] + "--->"
                            + txtExistencia.getText() + "\n" + aux[4] + "--->"
                            + txtStock.getText() + "\n" + aux[5] + "--->"
                            + comboBoxAlmacenUM.getSelectedItem().toString(), "Modificar producto", JOptionPane.INFORMATION_MESSAGE);
                        if (JOptionPane.OK_OPTION == seleccion) {
                            try {
                                seLogro = mUIP.modificar(Integer.parseInt(aux[0]), txtNombre.getText(), Integer.parseInt(txtExistencia.getText()),
                                        Integer.parseInt(txtStock.getText()), Float.valueOf(txtPrecio.getText()), comboBoxAlmacenUM.getSelectedItem().toString());
                                if (!seLogro) {
                                    if(JOptionPane.showOptionDialog(this, "Productor modificado con extio \n Desea modificar otro producto", "Producto Modificado",
                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si") == 1) {
                                    almacenFormaBase();
                                    } else {
                                        txtNombre.setText("");
                                        txtPrecio.setText("");
                                        txtExistencia.setText("");
                                        txtStock.setText("");
                                    }
                                } else {
                                    if(JOptionPane.showOptionDialog(this, "Productor no se a podido modificar \n Desea modificar otro producto", "Producto no modificado",
                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Si", "No"}, "Si") == 1) {
                                    almacenFormaBase();
                                    } else {
                                        txtNombre.setText("");
                                        txtPrecio.setText("");
                                        txtExistencia.setText("");
                                        txtStock.setText("");
                                    }
                                } 
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(this, "ERROR: " + ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                        
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Favor de rellenar todos los campos de texto", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Favor de seleccionar en la tabla el mismo producto que se encuentra en el renglon "
                + (tablaAlmacenSeleccionModificar + 1), "Se a seleccionado otro producto", JOptionPane.WARNING_MESSAGE);
        }
        break;
        default:
        break;
        }
    }//GEN-LAST:event_btnConfirmarAlmacenActionPerformed

    private void txtAlmacenBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAlmacenBuscarKeyReleased
        if (btnRadioID.isSelected()) {
            consultarSQL(txtAlmacenBuscar.getText(), 1);
        } else if (btnRadioNombre.isSelected()) {
            consultarSQL(txtAlmacenBuscar.getText(), 2);
        } else if (btnRadioPrecio.isSelected()) {
            consultarSQL(txtAlmacenBuscar.getText(), 3);
        } else if (btnRadioCantidad.isSelected()) {
            consultarSQL(txtAlmacenBuscar.getText(), 4);
        }
    }//GEN-LAST:event_txtAlmacenBuscarKeyReleased

    private void btnRadioIDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRadioIDMouseClicked
        limpiarTxtYTabla();
    }//GEN-LAST:event_btnRadioIDMouseClicked

    private void btnRadioNombreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRadioNombreMouseClicked
        limpiarTxtYTabla();
    }//GEN-LAST:event_btnRadioNombreMouseClicked

    private void btnRadioPrecioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRadioPrecioMouseClicked
        limpiarTxtYTabla();
    }//GEN-LAST:event_btnRadioPrecioMouseClicked

    private void btnRadioCantidadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRadioCantidadMouseClicked
        limpiarTxtYTabla();
    }//GEN-LAST:event_btnRadioCantidadMouseClicked

        /*------------------Metodo para regresar a la fomra base el panel almacen------------------------*/
    public void almacenFormaBase() {
        labelTituloAlmacen.setVisible(false);
        txtNombre.setVisible(false);
        txtPrecio.setVisible(false);
        txtExistencia.setVisible(false);
        txtStock.setVisible(false);
        comboBoxAlmacenUM.setVisible(false);
        jLabel7.setVisible(false);
        btnRadioID.setVisible(false);
        btnRadioCantidad.setVisible(false);
        btnRadioNombre.setVisible(false);
        btnRadioPrecio.setVisible(false);
        jLabel8.setVisible(false);
        txtAlmacenBuscar.setVisible(false);
        
        btnRadioID.setSelected(true);
        txtNombre.setText("");
        txtPrecio.setText("");
        txtExistencia.setText("");
        txtStock.setText("");
        txtAlmacenBuscar.setText("");
        
        labelAlmacenExistencia.setVisible(false);
        labelAlmacenNombre.setVisible(false);
        labelAlmacenPrecio.setVisible(false);
        labelAlmacenStock.setVisible(false);
        labelAlmacenUM.setVisible(false);
        
        btnConfirmarAlmacen.setVisible(false);
        btnConfirmarAlmacen.setEnabled(false);
        
        consultarSQL("", 0);
    }
    /*------------------Metodo para poner visible los txt y labels para editar los productos del panel almacen------------------------*/
    public void almacenEditable() {
        labelTituloAlmacen.setVisible(true);
        txtNombre.setVisible(true);
        txtPrecio.setVisible(true);
        txtExistencia.setVisible(true);
        txtStock.setVisible(true);
        comboBoxAlmacenUM.setVisible(true);
        
        labelAlmacenExistencia.setVisible(true);
        labelAlmacenNombre.setVisible(true);
        labelAlmacenPrecio.setVisible(true);
        labelAlmacenStock.setVisible(true);
        labelAlmacenUM.setVisible(true);
        
        btnConfirmarAlmacen.setVisible(true);
        btnConfirmarAlmacen.setEnabled(true);
    }
    /*------------------Metodo para Comprobar si los textos estan vacios del panel almecen------------------------*/
    public boolean comprobarTXTAlmacen() {
        return !txtStock.getText().equals("")
                && !txtPrecio.getText().equals("") && !txtExistencia.getText().equals("") && !txtNombre.getText().equals("");
    }
    /**
     * Metodo para comprobar el dominio de los atributos.
     * @return Regresa true si el diminio es correto en todos los atributos, false en caso contrario
     */
    public boolean comprobarDominio() {
        boolean confirmacion1 = true, confirmacion2 = true, confirmacion3 = true, confirmacion = true;
        if(txtNombre.getText().length() > 25) {
        JOptionPane.showMessageDialog(this, "El nombre del producto " + txtNombre.getText() + " es demasiado largo. \n"
                + "El tamano maximo es de 25 caracteres", "Nombre demasiado largo", JOptionPane.ERROR_MESSAGE);
        }
        if(confirmacion == true && !(Float.valueOf(txtPrecio.getText()) >= 0 && Float.valueOf(txtPrecio.getText()) <= 9999.99)){
            JOptionPane.showMessageDialog(this, "El rango del precio tiene que ser de 0 a 9999.99", "Fuera de Rango", JOptionPane.ERROR_MESSAGE);
            confirmacion1 = false;
        }
        if (confirmacion1 == true && !(Double.valueOf(txtExistencia.getText()) >= 0 && Double.valueOf(txtExistencia.getText()) <= 99)) {
            JOptionPane.showMessageDialog(this, "El rango de la existencia tiene que ser de 0 a 99", "Fuera de Rango", JOptionPane.ERROR_MESSAGE);
            confirmacion2 = false;
        }
        if (confirmacion1 == true && confirmacion2 == true && !(Double.valueOf(txtStock.getText()) >= 0 && Double.valueOf(txtStock.getText()) <= 99)) {
            JOptionPane.showMessageDialog(this, "El rango del stock tiene que ser de 0 a 99", "Fuera de Rango", JOptionPane.ERROR_MESSAGE);
            confirmacion3 = false;
        }
        return confirmacion1 == true && confirmacion2 == true && confirmacion3 == true && confirmacion == true;
    }
    /**
     * Metodo que regresa a la forma base la tabla y limpia el txtBuscar
     * 
     */
    public void limpiarTxtYTabla() {
        txtAlmacenBuscar.setText("");
        consultarSQL("", 0);
    }
    /**
     * Hace la consulta dependiendo el filtro que se aplique
     * @param consulta
     * @param filtro 
     */
    public void consultarSQL(String consulta, int filtro) {
        ListaCola<Producto> queue = new ListaCola<Producto>();
        
        Producto seihin;
        try {
            queue = mUIP.consulta(filtro, consulta);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "ERROR: " + e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        vaciarTabla();
        while (true) {
            if (!queue.hasNext()) {
                break;
            }
            seihin = queue.pop();
            String[] datos = {String.valueOf(seihin.getId()), seihin.getNombre(),String.valueOf(seihin.getPrecio()),
            String.valueOf(seihin.getExistencia()), String.valueOf(seihin.getStock()), seihin.getUM()};
            modeloTablaAlmacen.addRow(datos);
        }
    }
    /**
     * Metodo para vaciar la tabla 
     */
    public void vaciarTabla() {
        for (int i =  modeloTablaAlmacen.getRowCount() - 1; i >= 0; i--) {
            modeloTablaAlmacen.removeRow(i);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlmacenAgregar;
    private javax.swing.JButton btnAlmacenConsultar;
    private javax.swing.JButton btnAlmacenEliminar;
    private javax.swing.JButton btnAlmacenModificar;
    private javax.swing.JButton btnConfirmarAlmacen;
    private javax.swing.ButtonGroup btnGroupAlmacen;
    private javax.swing.JRadioButton btnRadioCantidad;
    private javax.swing.JRadioButton btnRadioID;
    private javax.swing.JRadioButton btnRadioNombre;
    private javax.swing.JRadioButton btnRadioPrecio;
    private javax.swing.JComboBox<String> comboBoxAlmacenUM;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAlmacenExistencia;
    private javax.swing.JLabel labelAlmacenNombre;
    private javax.swing.JLabel labelAlmacenPrecio;
    private javax.swing.JLabel labelAlmacenStock;
    private javax.swing.JLabel labelAlmacenUM;
    private javax.swing.JLabel labelTituloAlmacen;
    private javax.swing.JTable tablaAlmacen;
    private javax.swing.JTextField txtAlmacenBuscar;
    private javax.swing.JTextField txtExistencia;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
